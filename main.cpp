/** main.cpp
 * Main function used by the Reber Grammar string generator
 * Dylan Auty, January 2016
 */

#include <iostream>
#include <ctime>
#include <cstdlib>
#include "reberNode.hpp"
#include "reberGrammar.hpp"

void printHelp();					// Function that prints the help information
void printReberString();			// Prints a string from a Reber Grammar, terminated by an endline character
void printEmbeddedReberString();	//Prints a string from an embedded Reber grammar, terminated by an endline character.

using namespace std;

int main(int argc, char* argv[]){
	srand(time(NULL));	// Seed rand()
	if (argc != 2){
		cerr << "ERROR: Invalid number of arguments, expecting 1. Use '-h' for help." << endl;
		exit(1);
	}
	else {
		if(string(argv[1])	== "-h"){
			printHelp();
			return 0;
		}
		if(string(argv[1]) == "-r"){
			printReberString();
			return 0;
		}
		if(string(argv[1]) == "-e"){
			printEmbeddedReberString();
			return 0;
		}
		else{
			cerr << "ERROR: Invalid argument, please use -h to see help." << endl;
			exit(1);
		}
	}

	reberNode* currentNode = NULL;
	reberNode n1(2), n2(2), n3(2);
	vector<reberNode*> v1 = {&n1, &n2};
	vector<char> c1 = {'B', 'C'};
	n1.connectToNodes(v1, c1);
	n1.transition();
	return 0;
}

void printHelp(){
	cout << "rebergen v0.1" << endl;
	cout << "Program to print strings from Reber Grammars." << endl;
	cout << "COMMAND LINE ARGUMENTS: 1" << endl;
	cout << "	-h : Prints this help message." << endl;
	cout << "	-r : Prints a string generated by a Reber grammar, terminated by an endline character." << endl;
	cout << "	-e : Prints a string generated by an embedded Reber grammar, terminated by an endline character." << endl;
	return;
}

void printReberString(){
	reberNode* currentNode = NULL;
	reberGrammar n1(2);
	currentNode = &n1;
	
}

void printEmbeddedReberString(){
	return;
}
